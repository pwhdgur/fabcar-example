< 1. fabric 1.4 설치시 주의사항 >
hyperledger fabric 1.4 를 사용하기 위해서는 반드시 go version 1.11.x, nodejs version 8.9.x 등 알맞은 버전을 사용해야함. 오류발생 가능서이 높음.


< 2. GO 설치 및 확인하기 >
cd $GOPATH/src && mkdir hello
nano hello.go

+++++++ hello.go 내용 ++++++++++
package main
import "fmt"
func main() {
    fmt.Printf("hello, world\n")
}

++++++++++++++++++++++++++++++

go build
./hello

권한에러시 => 문제해결) 
디렉토리 권한 변경
- sudo chown -R devbona:devbona /home/devbona/test


< 3. Fabric 1.4 Fabcar Cli Tutorial >

3.1 기존 네트워크 종료 및 컨테이너 종료 ( Docker 명령어 )
./byfn.sh down

3.2 Start Network
ubuntu@ip-:~/fabric-samples/fabcar$ ./startFabric.sh

3.3 Install the application
ubuntu@ip-:~/fabric-samples/fabcar/javascript$ npm install
(error 발생시 : sudo apt-get install build-essential)

* HLF 네트워크에 Admin과 User를 등록한다. 명령어 실행 후 \wallet에 admin과 user1의 개인키, 공개키, 인증서가 저장됨
ubuntu@ip-:~/fabric-samples/fabcar/javascript$ node enrollAdmin.js
ubuntu@ip-:~/fabric-samples/fabcar/javascript$ node registerUser.js
(gRpc error 발생시 : npm rebuild)

* mychannel의 fabcar 컨트랙트에 접근하여 원장에 등록된 차량의 정보를 모두 출력한다. (queryAllCars 함수를 호출) 
ubuntu@ip-:~/fabric-samples/fabcar/javascript$ node query.js

* 원장을 업데이트하기 위해서 invoke.js 파일을 일부 수정(invoke.js 44라인) 
첫 번째 파라미터는 그대로 유지하고, 두 번째부터 차량 식별자, 제조사, 차종, 차 색상, 소유자 순으로 수정
ex) contract.submitTransaction('createCar', 'CAR10', 'Hyundai', 'Genesis', 'Black', 'Boohyung')

ubuntu@ip-:~/fabric-samples/fabcar/javascript$ nano -c invoke.js

* 공유원장을 업데이트 후 업데이트 결과확인
ubuntu@ip-:~/fabric-samples/fabcar/javascript$ node invoke.js
ubuntu@ip-:~/fabric-samples/fabcar/javascript$ node query.js

3.4 개발 및 서비스 종료시 removing docker
ubuntu@ip-:~/fabric-samples/basic-network$ ./teardown.sh
or
ubuntu@ip-:~/fabric-samples/basic-network$ docker rm -f $(docker ps -aq)

ubuntu@ip-:~/fabric-samples/basic-network$ docker ps -a 

(주의) 이미지 전체 삭제 : docker rmi -f $(docker images -q)


< 4. Fabric 1.4 Fabcar Deep-Dive >
4.1 First Network 구성도 및 참조사이트
https://medium.com/@kctheservant/deep-dive-into-fabcar-revised-57cb54642572
https://boohyung.gitbook.io/tech/development/fabcar


- 두 조직 (Org1 및 Org2)에는 각각 두 개의 피어 노드 (peer0 및 peer1)
- SOLO를 사용하는 하나의 주문자 조직 및 하나의 주문자 노드
- 월드 상태 데이터베이스로 couchdb
- 인증 기관 (CA)
- cli Interface

4.2 Fabcar 체인 코드 이해
chaincode 위치 : fabric-samples/chaincode/fabcar/.... (go 우선 검토)

4.2.1 data structure

// Define the car structure, with 4 properties.  Structure tags are used by encoding/json library
type Car struct {
        Make   string `json:"make"`
        Model  string `json:"model"`
        Colour string `json:"colour"`
        Owner  string `json:"owner"`
}

4.2.2 Init()
The Init() is executed when the chaincode is instantiated in the Fabric network.

func (s *SmartContract) Init(APIstub shim.ChaincodeStubInterface) sc.Response {
        return shim.Success(nil)
}

4.2.3 Invoke()

/*
 * The Invoke method is called as a result of an application request to run the Smart Contract "fabcar"
 * The calling application program has also specified the particular smart contract function to be called, with arguments
 */
func (s *SmartContract) Invoke(APIstub shim.ChaincodeStubInterface) sc.Response {

        // Retrieve the requested Smart Contract function and arguments
        function, args := APIstub.GetFunctionAndParameters()
        // Route to the appropriate handler function to interact with the ledger appropriately
        if function == "queryCar" {
                return s.queryCar(APIstub, args)
        } else if function == "initLedger" {
                return s.initLedger(APIstub)
        } else if function == "createCar" {
                return s.createCar(APIstub, args)
        } else if function == "queryAllCars" {
                return s.queryAllCars(APIstub)
        } else if function == "changeCarOwner" {
                return s.changeCarOwner(APIstub, args)
        }

        return shim.Error("Invalid Smart Contract function name.")
}
The first argument is always the function (action of this invoke)

4.2.3.1 Invoke에 5개 function 정의

initLedger() function
queryAllCars() function
queryCar() function
createCar() function
changeCarOwner() function

4.2.3.1.1 initLedger()
10 개의 자동차 데이터 세트를 원장에 미리로드하는 기능
원장을 업데이트하는 API는 PutState () - 초기 한번만 실행함.

func (s *SmartContract) initLedger(APIstub shim.ChaincodeStubInterface) sc.Response {
        cars := []Car{
                Car{Make: "Toyota", Model: "Prius", Colour: "blue", Owner: "Tomoko"},
                Car{Make: "Ford", Model: "Mustang", Colour: "red", Owner: "Brad"},
                Car{Make: "Hyundai", Model: "Tucson", Colour: "green", Owner: "Jin Soo"},
                Car{Make: "Volkswagen", Model: "Passat", Colour: "yellow", Owner: "Max"},
                Car{Make: "Tesla", Model: "S", Colour: "black", Owner: "Adriana"},
                Car{Make: "Peugeot", Model: "205", Colour: "purple", Owner: "Michel"},
                Car{Make: "Chery", Model: "S22L", Colour: "white", Owner: "Aarav"},
                Car{Make: "Fiat", Model: "Punto", Colour: "violet", Owner: "Pari"},
                Car{Make: "Tata", Model: "Nano", Colour: "indigo", Owner: "Valeria"},
                Car{Make: "Holden", Model: "Barina", Colour: "brown", Owner: "Shotaro"},
        }

        i := 0
        for i < len(cars) {
                fmt.Println("i is ", i)
                carAsBytes, _ := json.Marshal(cars[i])
				// 원장을 업데이트
                APIstub.PutState("CAR"+strconv.Itoa(i), carAsBytes)
                fmt.Println("Added", cars[i])
                i = i + 1
        }

        return shim.Success(nil)
}

4.2.3.1.2 queryAllCars()
원장에서 데이터 검색을위한 API는 GetStateByRange

func (s *SmartContract) queryAllCars(APIstub shim.ChaincodeStubInterface) sc.Response {

	startKey := "CAR0"
	endKey := "CAR999"

	resultsIterator, err := APIstub.GetStateByRange(startKey, endKey)
	if err != nil {
		return shim.Error(err.Error())
	}
	defer resultsIterator.Close()

	// buffer is a JSON array containing QueryResults
	var buffer bytes.Buffer
	buffer.WriteString("[")

	bArrayMemberAlreadyWritten := false
	for resultsIterator.HasNext() {
		queryResponse, err := resultsIterator.Next()
		if err != nil {
			return shim.Error(err.Error())
		}
		// Add a comma before array members, suppress it for the first array member
		if bArrayMemberAlreadyWritten == true {
			buffer.WriteString(",")
		}
		buffer.WriteString("{\"Key\":")
		buffer.WriteString("\"")
		buffer.WriteString(queryResponse.Key)
		buffer.WriteString("\"")

		buffer.WriteString(", \"Record\":")
		// Record is a JSON object, so we write as-is
		buffer.WriteString(string(queryResponse.Value))
		buffer.WriteString("}")
		bArrayMemberAlreadyWritten = true
	}
	buffer.WriteString("]")

	fmt.Printf("- queryAllCars:\n%s\n", buffer.String())

	return shim.Success(buffer.Bytes())
}

4.2.3.1.3 queryCar ()
CarID를 기반으로 개별 자동차에 대한 쿼리
API는 GetState() CarID라는 하나의 인수 argument 사용

func (s *SmartContract) queryCar(APIstub shim.ChaincodeStubInterface, args []string) sc.Response {

	if len(args) != 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1")
	}

	carAsBytes, _ := APIstub.GetState(args[0])
	return shim.Success(carAsBytes)
}

4.2.3.1.4 createCar()
원장에 새로운 car를 추가
list of 5 arguments : CarID, Maker, Model, Colour and Owner.
API는 PutState() 

func (s *SmartContract) createCar(APIstub shim.ChaincodeStubInterface, args []string) sc.Response {

	if len(args) != 5 {
		return shim.Error("Incorrect number of arguments. Expecting 5")
	}

	var car = Car{Make: args[1], Model: args[2], Colour: args[3], Owner: args[4]}

	carAsBytes, _ := json.Marshal(car)
	APIstub.PutState(args[0], carAsBytes)

	return shim.Success(nil)
}

4.2.3.1.5 changeCarOwner()
CarID로 지정된 자동차의 소유자를 변경
API는 PutState() => CarID와 Owner라는 두가지 인수가 필요

func (s *SmartContract) changeCarOwner(APIstub shim.ChaincodeStubInterface, args []string) sc.Response {

	if len(args) != 2 {
		return shim.Error("Incorrect number of arguments. Expecting 2")
	}

	carAsBytes, _ := APIstub.GetState(args[0])
	car := Car{}

	json.Unmarshal(carAsBytes, &car)
	car.Owner = args[1]

	carAsBytes, _ = json.Marshal(car)
	APIstub.PutState(args[0], carAsBytes)

	return shim.Success(nil)
}

4.3 Bringing Up the First Network and Fabcar Chaincode (startFabric.sh)

4.3.1 Step 1 : Call first-network/byfn.sh to bring up First Network.

# startFabric.sh Code 내용
# launch network; create channel and join peer to channel
cd ../first-network
echo y | ./byfn.sh down
echo y | ./byfn.sh up -a -n -s couchdb

-a 두 조직의 Fabric CA를 불러옵니다.
-n 예제 체인 코드를 실행하지 마십시오.
-s couchdb 는 각 피어 노드에 대해 couchdb를 불러옵니다.

4.3.2 Step 2 :  Install Fabcar chaincode in all Peer Nodes

# startFabric.sh Code 내용
echo "Installing smart contract on peer0.org1.example.com"
docker exec \
  -e CORE_PEER_LOCALMSPID=Org1MSP \
  -e CORE_PEER_ADDRESS=peer0.org1.example.com:7051 \
  -e CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} \
  -e CORE_PEER_TLS_ROOTCERT_FILE=${ORG1_TLS_ROOTCERT_FILE} \
  cli \
  peer chaincode install \
    -n fabcar \
    -v 1.0 \
    -p "$CC_SRC_PATH" \
    -l "$CC_RUNTIME_LANGUAGE"

4.3.3 Step 3 : Instantiate Fabcar chaincode on mychannel

# startFabric.sh Code 내용
echo "Instantiating smart contract on mychannel"
docker exec \
  -e CORE_PEER_LOCALMSPID=Org1MSP \
  -e CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} \
  cli \
  peer chaincode instantiate \
    -o orderer.example.com:7050 \
    -C mychannel \
    -n fabcar \
    -l "$CC_RUNTIME_LANGUAGE" \
    -v 1.0 \
    -c '{"Args":[]}' \
    -P "AND('Org1MSP.member','Org2MSP.member')" \
    --tls \
    --cafile ${ORDERER_TLS_ROOTCERT_FILE} \
    --peerAddresses peer0.org1.example.com:7051 \
    --tlsRootCertFiles ${ORG1_TLS_ROOTCERT_FILE}

mychannel에 chaincode가 인스턴트화됨.
endorsing policy은 Org1과 Org2가 멤버로 요구되어진다.

4.3.4 Step 4 : initLedger () 호출

# startFabric.sh Code 내용
echo "Submitting initLedger transaction to smart contract on mychannel"
echo "The transaction is sent to all of the peers so that chaincode is built before receiving the following requests"
docker exec \
  -e CORE_PEER_LOCALMSPID=Org1MSP \
  -e CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} \
  cli \
  peer chaincode invoke \
    -o orderer.example.com:7050 \
    -C mychannel \
    -n fabcar \
    -c '{"function":"initLedger","Args":[]}' \
    --waitForEvent \
    --tls \
    --cafile ${ORDERER_TLS_ROOTCERT_FILE} \
    --peerAddresses peer0.org1.example.com:7051 \
    --peerAddresses peer1.org1.example.com:8051 \
    --peerAddresses peer0.org2.example.com:9051 \
    --peerAddresses peer1.org2.example.com:10051 \
    --tlsRootCertFiles ${ORG1_TLS_ROOTCERT_FILE} \
    --tlsRootCertFiles ${ORG1_TLS_ROOTCERT_FILE} \
    --tlsRootCertFiles ${ORG2_TLS_ROOTCERT_FILE} \
    --tlsRootCertFiles ${ORG2_TLS_ROOTCERT_FILE}

10개의 자동차 레코드를 장부에 미리로드하기 위해 initLedger()호출
두 조직의 승인이 필요하므로 지정된 두 조직의 피어와 함께 initLedger()가 호출
(참고 : 여기에는 4 개의 피어 노드가 표시됩니다. 실제로 각 조직에서 하나의 피어 만 필요합니다)

4.4 Demonstration of Chaincode Functions using CLI

4.4.1 원장의 모든 자동차 조회 (데모 1단계)

ubuntu@ip-:~/fabric-samples/fabcar$ docker exec cli peer chaincode query -C mychannel -n fabcar -c '{"Args":["queryAllCars"]}'
[{"Key":"CAR0", "Record":{"colour":"blue","make":"Toyota","model":"Prius","owner":"Tomoko"}},{"Key":"CAR1", "Record":{"colour":"red","make":"Ford","model":"Mustang","owner":"Brad"}},{"Key":"CAR2", "Record":{"colour":"green","make":"Hyundai","model":"Tucson","owner":"Jin Soo"}},{"Key":"CAR3", "Record":{"colour":"yellow","make":"Volkswagen","model":"Passat","owner":"Max"}},{"Key":"CAR4", "Record":{"colour":"black","make":"Tesla","model":"S","owner":"Adriana"}},{"Key":"CAR5", "Record":{"colour":"purple","make":"Peugeot","model":"205","owner":"Michel"}},{"Key":"CAR6", "Record":{"colour":"white","make":"Chery","model":"S22L","owner":"Aarav"}},{"Key":"CAR7", "Record":{"colour":"violet","make":"Fiat","model":"Punto","owner":"Pari"}},{"Key":"CAR8", "Record":{"colour":"indigo","make":"Tata","model":"Nano","owner":"Valeria"}},{"Key":"CAR9", "Record":{"colour":"brown","make":"Holden","model":"Barina","owner":"Shotaro"}}]


4.4.2 CarID로 특정 자동차 조회 (데모 2단계)
ubuntu@ip-:~/fabric-samples/fabcar$ docker exec -e CORE_PEER_ADDRESS=peer1.org1.example.com:8051 -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt cli peer chaincode query -C mychannel -n fabcar -c '{"Args":["queryCar","CAR4"]}'
{"colour":"black","make":"Tesla","model":"S","owner":"Adriana"}

4.4.3 제공된 세부 정보로 새 차(CAR12)를 추가 (데모 3계)
- peer0.org2를 가리키는 환경 변수
- 보증 정책에 두 개의 조직이 필요하므로이 호출을 peer0.org1 및 peer0.org2 (peerAddresses 옵션 참조)와 TLS 인증서 (tlsRootCertFiles 옵션)로 보냅니다.

ubuntu@ip-:~/fabric-samples/fabcar$ docker exec -it -e CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp -e CORE_PEER_ADDRESS=peer0.org2.example.com:9051 -e CORE_PEER_LOCALMSPID="Org2MSP" -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt cli peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n fabcar --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"Args":["createCar", "CAR12", "Honda", "Accord", "black", "Tom"]}'


Result) UTC [chaincodeCmd] chaincodeInvokeOrQuery -> INFO 001 Chaincode invoke successful. result: status:200


4.4.4 새 자동차가 원장에 추가 된것을 확인하기 위해 모든 자동차를 다시 조회 (데모 4단계)
- 모든 자동차를 다시 쿼리(peer1.org2에서)해서. 새 차 CAR12가 원장에 추가 된 것을 확인.

ubuntu@ip-:~/fabric-samples/fabcar$ docker exec -e CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp -e CORE_PEER_ADDRESS=peer1.org2.example.com:10051 -e CORE_PEER_LOCALMSPID="Org2MSP" -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt cli peer chaincode query -C mychannel -n fabcar -c '{"Args":["queryAllCars"]}'

Result : {"Key":"CAR12", "Record":{"colour":"black","make":"Honda","model":"Accord","owner":"Tom"}}


4.4.5 CAR4 자동차 소유자를 다른 사람으로 변경 (데모 5단계)
- 체인 코드가 호출 될 때 승인 정책마다 peer0.org1 및 peer0.org2를 지정
- {"Key":"CAR4", "Record":{"colour":"black","make":"Tesla","model":"S","owner":"Adriana"}}

ubuntu@ip-:~/fabric-samples/fabcar$ docker exec cli peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n fabcar --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"Args":["changeCarOwner", "CAR4", "KC"]}'

Result : UTC [chaincodeCmd] chaincodeInvokeOrQuery -> INFO 001 Chaincode invoke successful. result: status:200


4.4.6 CAR4 차를 다시 쿼리(from peer1.org1)하고 소유자 변경(Adriana => KC)이 완료된 것을 확인 (데모 6단계)
ubuntu@ip-:~/fabric-samples/fabcar$ docker exec -e CORE_PEER_ADDRESS=peer1.org1.example.com:8051 -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt cli peer chaincode query -C mychannel -n fabcar -c '{"Args":["queryCar","CAR4"]}'

Result : {"colour":"black","make":"Tesla","model":"S","owner":"KC"}

< 5. Understanding Fabcar Client Application >

the connection information : first-network/connection-org1.json 참조
 
5.1 Fabric Network에 사용자 및 관리자 등록

5.1.1 enrollAdmin.js 
- 관리자용 인증서를 생성. (wallet directory)

1) Fabric-ca-client 및 fabric-network 필요한 모듈 로딩.
2) Fabric CA의 액세스 포인트 정보 포함.
3) wallet/ directory 안에 admin 생성 확인.
4) 등록 ID 및 비밀을 사용하여 관리자를 Fabric CA에 등록 (docker-compose 파일의 ca0 서비스 참조 first-network/docker-composer-ca.yaml)
5) wallet/admin/ 안에 Key fair와 인증서 생성 확인.

5.1.2 registerUser.js
- user1을 등록

1) fabric-network 필요한 모듈 로딩.
2) user1이 이미 등록여부 확인.
3) 관리자가 아직 등록되지 않은 경우 enrollAdmin.js 실행.
4) 피어에 연결하는 새 게이트웨이를 생성
5) wallet/user1/ 안에user1의 키 페어 및 인증서 확인.


5.2 Chaincode invoking

5.2.1 query.js
- queryAllCars() 및 queryCar() 쿼리를 사용하여 체인 코드에 정의 된 두 가지 함수사용
- 원장 내용 수정이 포함되지 않으므로 로컬 세계 상태 데이터베이스에서 요청 된 데이터를 검색하여 피어에서 요청을 이행

1) fabric-network 필요한 모듈 로딩.
2) First Network deployment 하기위한 세부 정보 검색
3) user1 등록 여부 확인하기
4) 피어에 연결하는 새 게이트웨이 생성
5) 게이트웨이를 사용하여 채널(네트워크) mychannel 및 체인 코드(계약) fabcar 를 검색
6) 쿼리에 필요한 인수와 함께 evaluateTransaction() API 사용 (41 라인 code => const result = await contract.evaluateTransaction('queryAllCars'))
7) cli sting 결과확인.

5.2.2 invoke.js
- createCar() 및 changeCarOwner()의 두 가지 함수가 정의되 사용

1) fabric-network 필요한 모듈 로딩.
2) First Network deployment 하기위한 세부 정보 검색
3) user1 등록 여부 확인하기
4) 피어에 연결하는 새 게이트웨이 생성
5) 게이트웨이를 사용하여 채널(네트워크) mychannel 및 체인 코드(계약) fabcar 를 검색
6) 쿼리에 필요한 인수와 함께 API submitTransaction () 사용 (41 라인 code => await contract.submitTransaction('createCar', 'CAR12', 'Honda', 'Accord', 'Black', 'Tom'); )
7) 트랜잭션이 처리되면 게이트웨이를 분리

< 6. Building an API Server to Interact with Chaincode >
ExpressJS 이용한 API 설계
* GET /api/queryallcars
* GET /api/query/CarID
* POST /api/addcar/
* PUT /api/changeowner/CarID

6.1 API 프로젝트 준비작업

6.1.1 기존 소스 복사해서 재사용
cd fabric-samples/fabcar/
cp -r javascript/ apiserver/

6.1.2 두개의 신규 패키지 설치(express, body-parser)
cd apiserver
npm install express body-parser --save

6.1.3 API Server for Client Application
6.1.3.1 Create apiserver.js

- apiserver.js 코드 내용 (

var express = require('express');
var bodyParser = require('body-parser');
var app = express();
app.use(bodyParser.json());
// Setting for Hyperledger Fabric
const { FileSystemWallet, Gateway } = require('fabric-network');
const path = require('path');
const ccpPath = path.resolve(__dirname, '..', '..', 'first-network', 'connection-org1.json');
app.get('/api/queryallcars', async function (req, res) {
 // to be filled in
});
app.get('/api/query/:car_index', async function (req, res) {
 // to be filled in
});
app.post('/api/addcar/', async function (req, res) {
 // to be filled in
})
app.put('/api/changeowner/:car_index', async function (req, res) {
 // to be filled in
})
app.listen(8080);

6.1.3.2 
copy directly from query.js and invoke.js on the “to be filled in” portion, individually.
비동기 통신방식 적용

6.2 Demonstrate the API Use

6.2.1 Let clean up the fabric network and rebuild a new environment.

cd /fabric-samples/first-network
./byfn.sh down
docker rm $(docker ps -aq)
docker rmi $(docker images dev-* -q)

6.2.2 bring up the First Network for Fabcar again.

cd /fabric-samples/fabcar
./startFabric.sh
cd /fabric-samples/fabcar/apiserver
rm -rf wallet
node enrollAdmin.js
node registerUser.js
node apiserver.js

Step 1: Query all car records
curl http://IP or Domain:8080/api/queryallcars
or
curl http://localhost:8080/api/queryallcars

Step 2: Query a specific car by CarID
curl http://IP or Domain:8080/api/query/CAR4
or
curl http://localhost:8080/api/query/CAR4

Step 3: Add a new car
curl -d '{"carid":"CAR12","make":"Honda","model":"Accord","colour":"black","owner":"Tom"}' -H "Content-Type: application/json" -X POST http://IP or Domain:8080/api/addcar
or
curl -d '{"carid":"CAR12","make":"Honda","model":"Accord","colour":"black","owner":"Tom"}' -H "Content-Type: application/json" -X POST http://localhost:8080/api/addcar

Step 4: Query all cars again
curl http://IP or Domain:8080/api/queryallcars
or
curl http://localhost:8080/api/queryallcars

Step 5: Change owner of CAR4
curl -d '{"owner":"KC"}' -H "Content-Type: application/json" -X PUT http://IP or Domain:8080/api/changeowner/CAR4
or 
curl -d '{"owner":"KC"}' -H "Content-Type: application/json" -X PUT http://localhost:8080/api/changeowner/CAR4

Step 6: Query CAR4 again
curl http://IP or Domain:8080/api/query/CAR4
or
curl http://localhost:8080/api/query/CAR4

< 7. Clean Up >
cd /fabric-samples/first-network
./byfn.sh down
docker rm $(docker ps -aq)
docker rmi $(docker images dev-* -q)
docker network prune


< 8. FabCar Client (React JS) >
참조 사이트 : https://github.com/chhaileng/fabcar-client
npm install express body-parser --save (필요시)
npm install socket.io (필요시)

8.1 Network Setup
8.1.1 Network (Hyperledger Fabric v1.4)
$ git clone https://github.com/hyperledger/fabric-samples.git
$ cd fabcar
$ ./startFabric.sh

8.2 Enroll admin and register user
$ cd fabcar/javascript
$ node enrollAdmin.js
$ node registerUser.js
$ node query.js    //test

8.3 REST Server
8.3.1 Create app.js
/*
 * app.js 코드내용 Start
 * app.listen 3000 => 열려있는 포트로 변경
 * app.js 를 ~/fabric-samples/fabcar/apiserver 디렉토리 밑에 생성.
*/
const express = require('express')
const app = express()

const { FileSystemWallet, Gateway } = require('fabric-network');
const path = require('path');

const ccpPath = path.resolve(__dirname, '..', '..', 'first-network', 'connection-org1.json');

// CORS Origin
app.use(function (req, res, next) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
  res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  res.setHeader('Access-Control-Allow-Credentials', true);
  next();
});

app.use(express.json());

app.get('/cars', async (req, res) => {
  try {
    const walletPath = path.join(process.cwd(), 'wallet');
    const wallet = new FileSystemWallet(walletPath);
    const userExists = await wallet.exists('user1');
    if (!userExists) {
      res.json({status: false, error: {message: 'User not exist in the wallet'}});
      return;
    }

    const gateway = new Gateway();
    await gateway.connect(ccpPath, { wallet, identity: 'user1', discovery: { enabled: true, asLocalhost: true } });
    const network = await gateway.getNetwork('mychannel');
    const contract = network.getContract('fabcar');
    const result = await contract.evaluateTransaction('queryAllCars');
    res.json({status: true, cars: JSON.parse(result.toString())});
  } catch (err) {
    res.json({status: false, error: err});
  }
});

app.get('/cars/:key', async (req, res) => {
  try {
    const walletPath = path.join(process.cwd(), 'wallet');
    const wallet = new FileSystemWallet(walletPath);
    const userExists = await wallet.exists('user1');
    if (!userExists) {
      res.json({status: false, error: {message: 'User not exist in the wallet'}});
      return;
    }

    const gateway = new Gateway();
    await gateway.connect(ccpPath, { wallet, identity: 'user1', discovery: { enabled: true, asLocalhost: true } });
    const network = await gateway.getNetwork('mychannel');
    const contract = network.getContract('fabcar');
    const result = await contract.evaluateTransaction('queryCar', req.params.key);
    res.json({status: true, car: JSON.parse(result.toString())});
  } catch (err) {
    res.json({status: false, error: err});
  }
});

app.post('/cars', async (req, res) => {
  if ((typeof req.body.key === 'undefined' || req.body.key === '') ||
      (typeof req.body.make === 'undefined' || req.body.make === '') ||
      (typeof req.body.model === 'undefined' || req.body.model === '') ||
      (typeof req.body.color === 'undefined' || req.body.color === '') ||
      (typeof req.body.owner === 'undefined' || req.body.owner === '')) {
    res.json({status: false, error: {message: 'Missing body.'}});
    return;
  }

  try {
    const walletPath = path.join(process.cwd(), 'wallet');
    const wallet = new FileSystemWallet(walletPath);
    const userExists = await wallet.exists('user1');
    if (!userExists) {
      res.json({status: false, error: {message: 'User not exist in the wallet'}});
      return;
    }

    const gateway = new Gateway();
    await gateway.connect(ccpPath, { wallet, identity: 'user1', discovery: { enabled: true, asLocalhost: true } });
    const network = await gateway.getNetwork('mychannel');
    const contract = network.getContract('fabcar');
    await contract.submitTransaction('createCar', req.body.key, req.body.make, req.body.model, req.body.color, req.body.owner);
    res.json({status: true, message: 'Transaction (create car) has been submitted.'})
  } catch (err) {
    res.json({status: false, error: err});
  }
});

app.put('/cars', async (req, res) => {
  if ((typeof req.body.key === 'undefined' || req.body.key === '') ||
      (typeof req.body.owner === 'undefined' || req.body.owner === '')) {
    res.json({status: false, error: {message: 'Missing body.'}});
    return;
  }

  try {
    const walletPath = path.join(process.cwd(), 'wallet');
    const wallet = new FileSystemWallet(walletPath);
    const userExists = await wallet.exists('user1');
    if (!userExists) {
      res.json({status: false, error: {message: 'User not exist in the wallet'}});
      return;
    }

    const gateway = new Gateway();
    await gateway.connect(ccpPath, { wallet, identity: 'user1', discovery: { enabled: true, asLocalhost: true } });
    const network = await gateway.getNetwork('mychannel');
    const contract = network.getContract('fabcar');
    await contract.submitTransaction('changeCarOwner', req.body.key, req.body.owner);
    res.json({status: true, message: 'Transaction (change car owner) has been submitted.'})
  } catch (err) {
    res.json({status: false, error: err});
  }
});

app.listen(3000, () => {
  console.log('REST Server listening on port 3000');
});
/*
 * App.js 코드내용 End
*/

8.3.2 Run
$ node app.js

8.4 Client Application (Reactjs)

8.4.1 Download & npm install
~/fabric-samples/fabcar$ git clone https://github.com/chhaileng/fabcar-client.git
$ cd fabcar-client
$ npm install
(npm install 에러시..package-lock.json 삭제 후 재시도)

8.4.2 source 수정
REST Server 연동시 파일 수정
- AddCar.js : axios.post(http://master:3000/cars => http://도메인 또는 IP:3000/cars)
- AllCars.js : axios.post(http://master:3000/cars => http://도메인 또는 IP:3000/cars)
- ChangeOwner.js : axios.post(http://master:3000/cars => http://도메인 또는 IP:3000/cars)

8.4.3 Run
$ npm start


< 9. Docker 명령어 >

9.1 이미지 리스트 확인
$ docker images

9.2 이미지 삭제(ID)
$ docker rmi e1de74e67cc7

9.3 컨테이너 목록 확인
$ docker ps -a
or 
$ docker container ls -a

9.4 컨테이너 삭제 (ID)
$ docker rm d1202a706e75

< 10. IP정보 >

내부 공인 IP 확인 : ifconfig | egrep "(^\\w|inet )"  또는  ifconfig | grep "inet "
외부 공인 IP 확인 : curl ifconfig.me

< 11. 네트워크 포트 정보 >
netstat -tnlp

포트 확인 : netstat -tnlp | grep 8080
포트 kill : kill -9 16940(PID)
