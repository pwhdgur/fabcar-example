
< 1. fabric 1.4 설치시 주의사항 >
hyperledger fabric 1.4 를 사용하기 위해서는 반드시 go version 1.11.x, nodejs version 8.9.x 등 알맞은 버전을 사용해야함. 오류발생 가능서이 높음.

< 2. GO 설치 및 확인하기 >
cd $GOPATH/src && mkdir hello
nano hello.go

+++++++ hello.go 내용 ++++++++++
package main
import "fmt"
func main() {
    fmt.Printf("hello, world\n")
}
++++++++++++++++++++++++++++++
go build
./hello

권한에러시 => 문제해결) 
디렉토리 권한 변경
- sudo chown -R devbona:devbona /home/devbona/test

< 3. Fabric 1.4 Fabcar Cli Tutorial >
3.1 기존 네트워크 종료 및 컨테이너 종료 ( Docker 명령어 )
./byfn.sh down

3.2 Start Network
ubuntu@ip-:~/fabric-samples/fabcar$ ./startFabric.sh

3.3 Install the application
ubuntu@ip-:~/fabric-samples/fabcar/javascript$ npm install
(error 발생시 : sudo apt-get install build-essential)

* HLF 네트워크에 Admin과 User를 등록한다. 명령어 실행 후 \wallet에 admin과 user1의 개인키, 공개키, 인증서가 저장됨
ubuntu@ip-:~/fabric-samples/fabcar/javascript$ node enrollAdmin.js
(gRpc error 발생시 : npm rebuild)

* mychannel의 fabcar 컨트랙트에 접근하여 원장에 등록된 차량의 정보를 모두 출력한다. (queryAllCars 함수를 호출) 
ubuntu@ip-:~/fabric-samples/fabcar/javascript$ node query.js

* 원장을 업데이트하기 위해서 invoke.js 파일을 일부 수정(invoke.js 44라인) 
첫 번째 파라미터는 그대로 유지하고, 두 번째부터 차량 식별자, 제조사, 차종, 차 색상, 소유자 순으로 수정
ex) contract.submitTransaction('createCar', 'CAR10', 'Hyundai', 'Genesis', 'Black', 'Boohyung')

ubuntu@ip-:~/fabric-samples/fabcar/javascript$ nano -c invoke.js

* 공유원장을 업데이트 후 업데이트 결과확인
ubuntu@ip-:~/fabric-samples/fabcar/javascript$ node invoke.js
ubuntu@ip-:~/fabric-samples/fabcar/javascript$ node query.js

3.4 개발 및 서비스 종료시 removing docker
ubuntu@ip-:~/fabric-samples/basic-network$ ./teardown.sh
or
ubuntu@ip-:~/fabric-samples/basic-network$ docker rm -f $(docker ps -aq)

ubuntu@ip-:~/fabric-samples/basic-network$ docker ps -a 

(주의) 이미지 전체 삭제 : docker rmi -f $(docker images -q)


< 4. Fabric 1.4 Fabcar Deep-Dive >
4.1 First Network 구성도 및 참조사이트
https://medium.com/@kctheservant/deep-dive-into-fabcar-revised-57cb54642572
https://boohyung.gitbook.io/tech/development/fabcar

- 두 조직 (Org1 및 Org2)에는 각각 두 개의 피어 노드 (peer0 및 peer1)
- SOLO를 사용하는 하나의 주문자 조직 및 하나의 주문자 노드
- 월드 상태 데이터베이스로 couchdb
- 인증 기관 (CA)
- cli Interface

4.2 Fabcar 체인 코드 이해
chaincode 위치 : fabric-samples/chaincode/fabcar/.... (go 우선 검토)

4.2.1 data structure

// Define the car structure, with 4 properties.  Structure tags are used by encoding/json library
type Car struct {
        Make   string `json:"make"`
        Model  string `json:"model"`
        Colour string `json:"colour"`
        Owner  string `json:"owner"`
}

4.2.2 Init()
The Init() is executed when the chaincode is instantiated in the Fabric network.

func (s *SmartContract) Init(APIstub shim.ChaincodeStubInterface) sc.Response {
        return shim.Success(nil)
}

4.2.3 Invoke()

/*
 * The Invoke method is called as a result of an application request to run the Smart Contract "fabcar"
 * The calling application program has also specified the particular smart contract function to be called, with arguments
 */
func (s *SmartContract) Invoke(APIstub shim.ChaincodeStubInterface) sc.Response {

        // Retrieve the requested Smart Contract function and arguments
        function, args := APIstub.GetFunctionAndParameters()
        // Route to the appropriate handler function to interact with the ledger appropriately
        if function == "queryCar" {
                return s.queryCar(APIstub, args)
        } else if function == "initLedger" {
                return s.initLedger(APIstub)
        } else if function == "createCar" {
                return s.createCar(APIstub, args)
        } else if function == "queryAllCars" {
                return s.queryAllCars(APIstub)
        } else if function == "changeCarOwner" {
                return s.changeCarOwner(APIstub, args)
        }

        return shim.Error("Invalid Smart Contract function name.")
}
The first argument is always the function (action of this invoke)

4.2.3.1 Invoke에 5개 function 정의

initLedger() function
queryAllCars() function
queryCar() function
createCar() function
changeCarOwner() function

4.2.3.1.1 initLedger()
10 개의 자동차 데이터 세트를 원장에 미리로드하는 기능
원장을 업데이트하는 API는 PutState () - 초기 한번만 실행함.

func (s *SmartContract) initLedger(APIstub shim.ChaincodeStubInterface) sc.Response {
        cars := []Car{
                Car{Make: "Toyota", Model: "Prius", Colour: "blue", Owner: "Tomoko"},
                Car{Make: "Ford", Model: "Mustang", Colour: "red", Owner: "Brad"},
                Car{Make: "Hyundai", Model: "Tucson", Colour: "green", Owner: "Jin Soo"},
                Car{Make: "Volkswagen", Model: "Passat", Colour: "yellow", Owner: "Max"},
                Car{Make: "Tesla", Model: "S", Colour: "black", Owner: "Adriana"},
                Car{Make: "Peugeot", Model: "205", Colour: "purple", Owner: "Michel"},
                Car{Make: "Chery", Model: "S22L", Colour: "white", Owner: "Aarav"},
                Car{Make: "Fiat", Model: "Punto", Colour: "violet", Owner: "Pari"},
                Car{Make: "Tata", Model: "Nano", Colour: "indigo", Owner: "Valeria"},
                Car{Make: "Holden", Model: "Barina", Colour: "brown", Owner: "Shotaro"},
        }

        i := 0
        for i < len(cars) {
                fmt.Println("i is ", i)
                carAsBytes, _ := json.Marshal(cars[i])
				// 원장을 업데이트
                APIstub.PutState("CAR"+strconv.Itoa(i), carAsBytes)
                fmt.Println("Added", cars[i])
                i = i + 1
        }

        return shim.Success(nil)
}

4.2.3.1.2 queryAllCars()
원장에서 데이터 검색을위한 API는 GetStateByRange

func (s *SmartContract) queryAllCars(APIstub shim.ChaincodeStubInterface) sc.Response {

	startKey := "CAR0"
	endKey := "CAR999"

	resultsIterator, err := APIstub.GetStateByRange(startKey, endKey)
	if err != nil {
		return shim.Error(err.Error())
	}
	defer resultsIterator.Close()

	// buffer is a JSON array containing QueryResults
	var buffer bytes.Buffer
	buffer.WriteString("[")

	bArrayMemberAlreadyWritten := false
	for resultsIterator.HasNext() {
		queryResponse, err := resultsIterator.Next()
		if err != nil {
			return shim.Error(err.Error())
		}
		// Add a comma before array members, suppress it for the first array member
		if bArrayMemberAlreadyWritten == true {
			buffer.WriteString(",")
		}
		buffer.WriteString("{\"Key\":")
		buffer.WriteString("\"")
		buffer.WriteString(queryResponse.Key)
		buffer.WriteString("\"")

		buffer.WriteString(", \"Record\":")
		// Record is a JSON object, so we write as-is
		buffer.WriteString(string(queryResponse.Value))
		buffer.WriteString("}")
		bArrayMemberAlreadyWritten = true
	}
	buffer.WriteString("]")

	fmt.Printf("- queryAllCars:\n%s\n", buffer.String())

	return shim.Success(buffer.Bytes())
}

4.2.3.1.3 queryCar ()
CarID를 기반으로 개별 자동차에 대한 쿼리
API는 GetState() CarID라는 하나의 인수 argument 사용

func (s *SmartContract) queryCar(APIstub shim.ChaincodeStubInterface, args []string) sc.Response {

	if len(args) != 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1")
	}

	carAsBytes, _ := APIstub.GetState(args[0])
	return shim.Success(carAsBytes)
}

4.2.3.1.4 createCar()
원장에 새로운 car를 추가
list of 5 arguments : CarID, Maker, Model, Colour and Owner.
API는 PutState() 

func (s *SmartContract) createCar(APIstub shim.ChaincodeStubInterface, args []string) sc.Response {

	if len(args) != 5 {
		return shim.Error("Incorrect number of arguments. Expecting 5")
	}

	var car = Car{Make: args[1], Model: args[2], Colour: args[3], Owner: args[4]}

	carAsBytes, _ := json.Marshal(car)
	APIstub.PutState(args[0], carAsBytes)

	return shim.Success(nil)
}

4.2.3.1.5 changeCarOwner()
CarID로 지정된 자동차의 소유자를 변경
API는 PutState() => CarID와 Owner라는 두가지 인수가 필요

func (s *SmartContract) changeCarOwner(APIstub shim.ChaincodeStubInterface, args []string) sc.Response {

	if len(args) != 2 {
		return shim.Error("Incorrect number of arguments. Expecting 2")
	}

	carAsBytes, _ := APIstub.GetState(args[0])
	car := Car{}

	json.Unmarshal(carAsBytes, &car)
	car.Owner = args[1]

	carAsBytes, _ = json.Marshal(car)
	APIstub.PutState(args[0], carAsBytes)

	return shim.Success(nil)
}

4.3 Bringing Up the First Network and Fabcar Chaincode





< 9. Docker 명령어 >

9.1 이미지 리스트 확인
$ docker images

9.2 이미지 삭제(ID)
$ docker rmi e1de74e67cc7

9.3 컨테이너 목록 확인
$ docker ps -a
or 
$ docker container ls -a

9.4 컨테이너 삭제 (ID)
$ docker rm d1202a706e75

< Fabric Sample cli 내용 >
JavaScript:

  Start by changing into the "javascript" directory:
    cd javascript

  Next, install all required packages:
    npm install

  Then run the following applications to enroll the admin user, and register a new user
  called user1 which will be used by the other applications to interact with the deployed
  FabCar contract:
    node enrollAdmin
    node registerUser

  You can run the invoke application as follows. By default, the invoke application will
  create a new car, but you can update the application to submit other transactions:
    node invoke

  You can run the query application as follows. By default, the query application will
  return all cars, but you can update the application to evaluate other transactions:
    node query

TypeScript:

  Start by changing into the "typescript" directory:
    cd typescript

  Next, install all required packages:
    npm install

  Next, compile the TypeScript code into JavaScript:
    npm run build

  Then run the following applications to enroll the admin user, and register a new user
  called user1 which will be used by the other applications to interact with the deployed
  FabCar contract:
    node dist/enrollAdmin
    node dist/registerUser

  You can run the invoke application as follows. By default, the invoke application will
  create a new car, but you can update the application to submit other transactions:
    node dist/invoke

  You can run the query application as follows. By default, the query application will
  return all cars, but you can update the application to evaluate other transactions:
    node dist/query

Java:

  Start by changing into the "java" directory:
    cd java

  Then, install dependencies and run the test using:
    mvn test

  The test will invoke the sample client app which perform the following:
    - Enroll admin and user1 and import them into the wallet (if they don't already exist there)
    - Submit a transaction to create a new car
    - Evaluate a transaction (query) to return details of this car
    - Submit a transaction to change the owner of this car
    - Evaluate a transaction (query) to return the updated details of this car

